logging:
  level:
    root: WARN
    com.sdehunt: TRACE

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/spring_social?useSSL=false
    username: root
    password: root

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: d0173d642d8e3054a4f6
            clientSecret: a8677dbfeb11a7a0e765a4b146cd69e426297f8a
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
          linkedin:
            provider: linkedin
            clientId: 77xfd7snfz01vi
            clientSecret: VUVoq9Kt3rCs809O
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            authorizationGrantType: authorization_code
            clientAuthenticationMethod: post
            scope:
              - r_emailaddress
              - r_liteprofile
              - w_member_social
        provider:
          #          facebook: # TODO make similar for github?
          #            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
          #            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
          #            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
          linkedin:
            authorizationUri: https://www.linkedin.com/oauth/v2/authorization
            tokenUri: https://www.linkedin.com/oauth/v2/accessToken
            userInfoUri: https://api.linkedin.com/v2/me
            userNameAttribute: id
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC #TODO what is this?
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - ${FRONT_END_HOST}:${FRONT_END_PORT}/oauth2/redirect
#      - myandroidapp://oauth2/redirect
#      - myiosapp://oauth2/redirect